# EMBEDDED SERVER CONFIGURATION (ServerProperties)

#springboot 任何可选的命令行参数都以： --开头，例如：--server.port=9000 --name=ceeker 都转化为property，添加到environment中
#且总是优先于其它属性源。可以采用：SpringApplication.setAddCommandLineProperties(false)来阻止添加到environment中。

#多环境的配置思路：
#application.properties中配置通用内容，并设置spring.profiles.active=dev，以开发环境为默认配置
#application-{profile}.properties中配置各个环境不同的内容，如数据库连接密码等
#通过命令行方式去激活不同环境的配置，java -jar xxx.jar --spring.profiles.active=prod
#java -jar xxx.jar --server.port=8888 通过命令设置属性
#设置开发环境为默认配置。通过命令激活不同环境的配置：
spring.profiles.active=dev

server.session.timeout= 3600
server.contextPath=
spring.application.name=springboot-mybatis



### --------------------view config ------------------ 
#server.error.whitelabel.enabled=false
#default=/templates/

#jsp
spring.mvc.view.prefix=/WEB-INF/views/
spring.mvc.view.suffix=.jsp

#velocity
#spring.velocity.cache=false
#spring.velocity.prefix=/views/
#spring.velocity.suffix=.html
#spring.velocity.expose-spring-macro-helpers=true
#spring.velocity.content-type=text/html;charset=UTF-8
#spring.velocity.expose-session-attributes=true


### ------------------ monitor admin server---------------------
# 自带admin server模块，并把自己加入到admin server的监控中
#spring.boot.admin.context-path=/admin
#spring.boot.admin.url=http://localhost:${server.port}${spring.boot.admin.context-path}
#endpoints.shutdown.enabled=true
#endpoints.health.sensitive=false

# 注册应用到专用的admin server
#spring.boot.admin.url=http://localhost:8080

######------actuator config   http://javabeat.net/spring-boot-actuator/
management.port=90 
management.address=127.0.0.1
management.context-path=/endpoints
endpoints.health.enabled=false

management.security.enabled=true
security.basic.enabled=true
security.user.name=admin
security.user.password=admin


###-----------------------------log config----------------------------
#system log level
#debug=true
#level * means package name or logger name;
#eg:logging.level.org.ceeker.web.sbootm=INFO  means: under org.ceeker.web.sbootm  package logger level is INFO
logging.level.*=DEBUG
logging.level.org.springframework.web:info
#logging.path=/var/log   (default: spring.log)
#logging.file=springboot.log

#colorful log
spring.output.ansi.enabled=DETECT


# @之间的数据来自于pom.xml
info.build.artifact=@project.artifactId@
info.build.name=@project.name@
info.build.description=@project.description@
info.build.version=@project.version@


#默认是开启的，使用CGLIB来实现AOP的时候，需要配置spring.aop.proxy-target-class=true，不然默认使用的是标准Java的实现。
spring.aop.auto=true

multipart.maxFileSize=10Mb

# Druid数据库连接池
spring.druid.name=springboot
spring.druid.url=jdbc:mysql://127.0.0.1:3306/springboot?useUnicode=true&characterEncoding=utf8&characterSetResults=utf8&zeroDateTimeBehavior=convertToNull
spring.druid.username=root
spring.druid.password=root
spring.druid.driverClassName=com.mysql.jdbc.Driver
spring.druid.filters=stat
spring.druid.maxActive=20
spring.druid.initialSize=1
spring.druid.maxWait=60000
spring.druid.minIdle=1
spring.druid.timeBetweenEvictionRunsMillis=60000
spring.druid.minEvictableIdleTimeMillis=300000
spring.druid.validationQuery=select 1
spring.druid.testWhileIdle=true
spring.druid.testOnBorrow=false
spring.druid.testOnReturn=false
spring.druid.poolPreparedStatements=true
spring.druid.maxOpenPreparedStatements=20
spring.druid.allow=127.0.0.1/24,127.0.0.2
spring.druid.deny=192.168.200.1/24


#产生随机数
# 随机字符串
com.ceeker.web.value=${random.value}  
# 随机int
com.ceeker.web.number=${random.int}  
# 随机long
com.ceeker.web.bignumber=${random.long}  
# 10以内的随机数
com.ceeker.web.pagesize=${random.int(10)}  
# 10-20的随机数
com.ceeker.web.index=${random.int[10,20]}  
