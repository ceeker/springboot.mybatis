#springboot 任何可选的命令行参数都以： --开头，例如：--server.port=9000 --name=ceeker 都转化为property，添加到environment中
#且总是优先于其它属性源。可以采用：SpringApplication.setAddCommandLineProperties(false)来阻止添加到environment中。

#多环境的配置思路：
#application.properties中配置通用内容，并设置spring.profiles.active=dev，以开发环境为默认配置
#application-{profile}.properties中配置各个环境不同的内容，如数据库连接密码等
#通过命令行方式去激活不同环境的配置，java -jar xxx.jar --spring.profiles.active=prod
#java -jar xxx.jar --server.port=8888 通过命令设置属性
#设置开发环境为默认配置。通过命令激活不同环境的配置：
spring.profiles.active=dev
server.session.timeout= 3600
server.contextPath=/
spring.application.name=springboot-mybatis

### --------------------view config ------------------ 
#server.error.whitelabel.enabled=false
#default=/templates/

#jsp
spring.mvc.view.prefix:/WEB-INF/views/
spring.mvc.view.suffix:.jsp

#velocity
#spring.velocity.cache=false
#spring.velocity.prefix=/views/
#spring.velocity.suffix=.html
#spring.velocity.expose-spring-macro-helpers=true
#spring.velocity.content-type=text/html;charset=UTF-8
#spring.velocity.expose-session-attributes=true


### ------------------ monitor admin server---------------------
# 自带admin server模块，并把自己加入到admin server的监控中
spring.boot.admin.context-path=/admin
#spring.boot.admin.url=http://localhost:${server.port}${spring.boot.admin.context-path}
# 注册应用到专用的admin server
spring.boot.admin.url=http://localhost
endpoints.shutdown.enabled=true
endpoints.health.sensitive=false
spring.boot.admin.client.name=springboot-mybatis

######------actuator config   http://javabeat.net/spring-boot-actuator/
#management.security.enabled=true
#security.basic.enabled=true
#security.user.name=admin
#security.user.password=admin
#management.context-path=/manager
#management.port=90

###-----------------------------log config----------------------------
#system log level
#debug=true
#level * means package name or logger name;
#eg:logging.level.org.ceeker.web.sbootm=INFO  means: under org.ceeker.web.sbootm  package logger level is INFO
logging.level.*=DEBUG
logging.level.org.springframework.web:info
#logging.path=/var/log   (default: spring.log)
#logging.file=springboot.log

#colorful log
spring.output.ansi.enabled=DETECT


# @之间的数据来自于pom.xml
info.build.artifact=@project.artifactId@
info.build.name=@project.name@
info.build.description=@project.description@
info.build.version=@project.version@

#默认是开启的，使用CGLIB来实现AOP的时候，需要配置spring.aop.proxy-target-class=true，不然默认使用的是标准Java的实现。
spring.aop.proxy-target-class=true
#spring.aop.auto=true

multipart.maxFileSize=10Mb

# \u6570\u636E\u6E90\u57FA\u7840\u914D\u7F6E
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/springboot?useUnicode=true&characterEncoding=utf8&characterSetResults=utf8&zeroDateTimeBehavior=convertToNull
spring.datasource.username=root
spring.datasource.password=root

# \u8FDE\u63A5\u6C60\u914D\u7F6E
# \u521D\u59CB\u5316\u5927\u5C0F\uFF0C\u6700\u5C0F\uFF0C\u6700\u5927
spring.datasource.initialSize=1
spring.datasource.minIdle=1
spring.datasource.maxActive=20

# \u914D\u7F6E\u83B7\u53D6\u8FDE\u63A5\u7B49\u5F85\u8D85\u65F6\u7684\u65F6\u95F4
spring.datasource.maxWait=60000

# \u914D\u7F6E\u95F4\u9694\u591A\u4E45\u624D\u8FDB\u884C\u4E00\u6B21\u68C0\u6D4B\uFF0C\u68C0\u6D4B\u9700\u8981\u5173\u95ED\u7684\u7A7A\u95F2\u8FDE\u63A5\uFF0C\u5355\u4F4D\u662F\u6BEB\u79D2 
spring.datasource.timeBetweenEvictionRunsMillis=60000

# \u914D\u7F6E\u4E00\u4E2A\u8FDE\u63A5\u5728\u6C60\u4E2D\u6700\u5C0F\u751F\u5B58\u7684\u65F6\u95F4\uFF0C\u5355\u4F4D\u662F\u6BEB\u79D2 
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=SELECT 1 FROM DUAL
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false

# \u6253\u5F00PSCache\uFF0C\u5E76\u4E14\u6307\u5B9A\u6BCF\u4E2A\u8FDE\u63A5\u4E0APSCache\u7684\u5927\u5C0F 
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20

# \u914D\u7F6E\u76D1\u63A7\u7EDF\u8BA1\u62E6\u622A\u7684filters\uFF0C\u53BB\u6389\u540E\u76D1\u63A7\u754C\u9762sql\u65E0\u6CD5\u7EDF\u8BA1\uFF0C'wall'\u7528\u4E8E\u9632\u706B\u5899 
spring.datasource.filters=stat,wall

# \u901A\u8FC7connectProperties\u5C5E\u6027\u6765\u6253\u5F00mergeSql\u529F\u80FD\uFF1B\u6162SQL\u8BB0\u5F55
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# \u5408\u5E76\u591A\u4E2ADruidDataSource\u7684\u76D1\u63A7\u6570\u636E
spring.datasource.useGlobalDataSourceStat=true
# \u662F\u5426\u5728\u63A7\u5236\u53F0\u663E\u793Asql\u8BED\u53E5

#jap
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.hbm2ddl.auto=create-drop 
spring.jpa.properties.hibernate.show_sql=true
spring.cache.type=ehcache

#Email 
spring.mail.host=smtp.qq.com
spring.mail.username=409273291@qq.com
spring.mail.password=test
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
#Mail notifications
spring.boot.admin.notify.mail.from=409273291@qq.com
spring.boot.admin.notify.mail.to=409273291@qq.com,zhangxiaoling01@58ganji.com
spring.boot.admin.notify.mail.subject="#{application.name} (#{application.id}) is #{to.status}"
spring.boot.admin.notify.mail.text="#{application.name} (#{application.id})\nstatus changed from #{from.status} to #{to.status}\n\n#{application.healthUrl}"



 
